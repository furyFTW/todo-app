{"version":3,"sources":["components/PokemonInfo.tsx","components/PokemonRow.tsx","components/PokemonTable.tsx","components/PokemonFilter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PokemonInfo","selectedPokemon","useSelector","state","name","english","Object","keys","base","map","key","PokemonRow","pokemon","onSelect","type","join","Button","variant","color","onClick","PokemonTable","dispatch","useDispatch","pokemons","filter","width","toLowerCase","includes","payload","id","Input","styled","input","PokemonFilter","value","onChange","evt","target","initState","store","createStore","action","Title","h1","TwoColumnLayout","div","PageContainer","App","useEffect","fetch","then","resp","json","data","AppProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.8ca88a77.chunk.js","sourcesContent":["import { useSelector } from \"react-redux\";\nimport { Pokemon } from \"../types\";\n\nconst PokemonInfo = () => {\n  const selectedPokemon:Pokemon = useSelector((state: any) => state.selectedPokemon);\n\n  return selectedPokemon ? (\n    <div>\n      <h1>{selectedPokemon.name.english}</h1>\n      <table>\n        <tbody>\n          {Object.keys(selectedPokemon.base).map((key) => (\n            <tr key={key}>\n              <td>{key}</td>\n              <td>{(selectedPokemon as any).base[key]}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  ) : null;\n};\n\nexport default PokemonInfo;\n","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport { Pokemon } from '../types';\n\ninterface Props {\n  pokemon: Pokemon;\n  onSelect: Function;\n}\n\nconst PokemonRow: React.FC<Props> = ({ pokemon, onSelect }) => (\n  <tr>\n    <td>{pokemon.name.english}</td>\n    <td>{pokemon.type.join(', ')}</td>\n    <td>\n      <Button variant=\"contained\" color=\"primary\" onClick={() => onSelect(pokemon)}>\n        Select!\n      </Button>\n    </td>\n  </tr>\n);\n\nexport default PokemonRow;","import { useDispatch, useSelector } from 'react-redux';\nimport { Pokemon } from '../types';\n\nimport PokemonRow from './PokemonRow';\n\n\nconst PokemonTable = () => {\n  const dispatch = useDispatch();\n  const pokemons:Pokemon[] = useSelector((state: any) => state.pokemons);\n  const filter:string = useSelector((state: any) => state.filter);\n\n  return (\n    <table width=\"100%\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Type</th>\n        </tr>\n      </thead>\n      <tbody>\n        {pokemons\n          .filter((pokemon) =>\n            pokemon.name.english.toLowerCase().includes(filter.toLowerCase())\n          )\n          .map((pokemon) => (\n            <PokemonRow\n              pokemon={pokemon}\n              key={pokemon.id}\n              onSelect={() =>\n                dispatch({ type: 'SET_SELECTED_POKEMON', payload: pokemon })\n              }\n            />\n          ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default PokemonTable;\n","\nimport styled from '@emotion/styled';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst Input = styled.input`\n  width: 100%;\n  font-size: x-large;\n  padding: 0.2rem;\n`;\n\nconst PokemonFilter = () => {\n  const dispatch = useDispatch();\n  const filter:string = useSelector((state: any) => state.filter);\n\n  return (\n    <Input\n      type=\"text\"\n      value={filter}\n      onChange={(evt) =>\n        dispatch({\n          type: 'SET_FILTER',\n          payload: evt.target.value,\n        })\n      }\n    />\n  );\n};\n\nexport default PokemonFilter;\n","import { useEffect } from 'react';\nimport { createStore, AnyAction } from 'redux';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\n\nimport styled from '@emotion/styled';\nimport { Pokemon } from './types';\n\nimport './App.css';\nimport PokemonInfo from './components/PokemonInfo';\nimport PokemonTable from './components/PokemonTable';\nimport PokemonFilter from './components/PokemonFilter';\n\nconst initState = {\n  pokemons: [],\n  filter: '',\n  selectedPokemon: null,\n};\n\nconst PokemonReducer = (state = initState, action: AnyAction) => {\n  switch (action.type) {\n    case 'SET_FILTER':\n      return {\n        ...state,\n        filter: action.payload,\n      };\n    case 'SET_POKEMON':\n      return {\n        ...state,\n        pokemons: action.payload,\n      };\n    case 'SET_SELECTED_POKEMON':\n      return {\n        ...state,\n        selectedPokemon: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(PokemonReducer);\n\nconst Title = styled.h1`\n  text-align: center;\n`;\n\nconst TwoColumnLayout = styled.div`\n  display: grid;\n  grid-template-columns: 70% 30%;\n  grid-column-gap: 1rems;\n`;\n\nconst PageContainer = styled.div`\n  margin: auto;\n  width: 800px;\n  padding-top: 1rem;\n`;\n\nfunction App() {\n  const dispatch = useDispatch();\n  const pokemons = useSelector((state: any) => state.pokemons);\n\n  useEffect(() => {\n    fetch('http://localhost:3000/todo-app/pokemone.json')\n      .then((resp) => resp.json())\n      .then((data: Pokemon[]) =>\n        dispatch({\n          type: 'SET_POKEMON',\n          payload: data,\n        })\n      );\n  }, [dispatch]);\n\n  if (!pokemons) {\n    return <Title>Loading</Title>;\n  }\n\n  return (\n    <PageContainer>\n      <Title>Pokemon Search</Title>\n      <TwoColumnLayout>\n        <div>\n          <PokemonFilter />\n          <PokemonTable />\n        </div>\n        <PokemonInfo />\n      </TwoColumnLayout>\n    </PageContainer>\n  );\n}\n\nconst AppProvider = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nexport default AppProvider;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CssBaseline } from '@material-ui/core';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}